<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git的理解</title>
    <url>/2020/04/29/git%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="git-它就是一个版本管理工具，方便在于保存文件的不同版本，可以撤回"><a href="#git-它就是一个版本管理工具，方便在于保存文件的不同版本，可以撤回" class="headerlink" title="git 它就是一个版本管理工具，方便在于保存文件的不同版本，可以撤回"></a>git 它就是一个版本管理工具，方便在于保存文件的不同版本，可以撤回</h2><h4 id="所有的文件都处于四种状态，未跟踪，已修改，已暂存，已提交"><a href="#所有的文件都处于四种状态，未跟踪，已修改，已暂存，已提交" class="headerlink" title="所有的文件都处于四种状态，未跟踪，已修改，已暂存，已提交"></a>所有的文件都处于四种状态，未跟踪，已修改，已暂存，已提交</h4><h4 id="只要触发提交就会产生新的版本。"><a href="#只要触发提交就会产生新的版本。" class="headerlink" title="只要触发提交就会产生新的版本。"></a>只要触发提交就会产生<strong>新的版本</strong>。</h4><h4 id="想要恢复文件"><a href="#想要恢复文件" class="headerlink" title="想要恢复文件"></a>想要恢复文件</h4><ul>
<li>提交前，可以恢复到上一次提交的状态，不管是已修改还是已暂存</li>
<li>提交后，就要回退版本，可以回退到任意一次提交后的状态</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>software</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git的多个ssh配置</title>
    <url>/2020/04/30/git%E7%9A%84%E5%A4%9A%E4%B8%AAssh%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="当我想使用多个仓库时，一个ssh就显得不够用了，输入密码又很麻烦，这时就可以配置多个ssh"><a href="#当我想使用多个仓库时，一个ssh就显得不够用了，输入密码又很麻烦，这时就可以配置多个ssh" class="headerlink" title="当我想使用多个仓库时，一个ssh就显得不够用了，输入密码又很麻烦，这时就可以配置多个ssh"></a>当我想使用多个仓库时，一个ssh就显得不够用了，输入密码又很麻烦，这时就可以配置多个ssh</h4><ul>
<li>使用命令生成新的ssh “youremail”填写邮箱，”name”的名字不能和已有的重复<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot; -f ~&#x2F;.ssh&#x2F;name</span><br></pre></td></tr></table></figure></li>
<li>想输入密码就来个密码，一般不用，按两次回车即可</li>
<li>然后打开.ssh文件夹下的config配置文件，添加以下配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host gityonger  (随便填写，不能重复，但要记住填写的内容)</span><br><span class="line">HostName github.com  (如果是码云的话使用gitee.com)  </span><br><span class="line">User git</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;name  (这个就是刚才新建的名字name)</span><br></pre></td></tr></table></figure></li>
<li>添加远程仓库，注意这时候Host的变化</li>
</ul>
<h3 id="原来"><a href="#原来" class="headerlink" title="原来"></a>原来</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:user&#x2F;repository</span><br></pre></td></tr></table></figure>
<h3 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin git@gityonger:user&#x2F;repository</span><br></pre></td></tr></table></figure>
<ul>
<li>把第一步生成的ssh公匙添加到仓库中，就可以进行推送了</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>software</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>hello world</title>
    <url>/2019/11/28/hello%20world/</url>
    <content><![CDATA[<a id="more"></a>



<h2 id="许多语言版本的hello-world"><a href="#许多语言版本的hello-world" class="headerlink" title="许多语言版本的hello world"></a>许多语言版本的hello world</h2><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hellow-world"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"hello world"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Ling;</span><br><span class="line"><span class="keyword">using</span> System.Test;</span><br><span class="line"><span class="keyword">namespace</span> Helloworld&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Program</span>&#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(<span class="built_in">string</span>[] args)</span></span>&#123;</span><br><span class="line">            <span class="built_in">Console</span>.WriteLine(<span class="string">"hello world"</span>);</span><br><span class="line">            <span class="built_in">Console</span>.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Hello world!"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Helloworld</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>software</tag>
      </tags>
  </entry>
  <entry>
    <title>1602使用</title>
    <url>/2020/02/28/yongyong/</url>
    <content><![CDATA[<h1 id="1602液晶简单的使用"><a href="#1602液晶简单的使用" class="headerlink" title="1602液晶简单的使用"></a>1602液晶简单的使用</h1><h2 id="RS-数据（1）-命令选择端（0）"><a href="#RS-数据（1）-命令选择端（0）" class="headerlink" title="RS:数据（1）/命令选择端（0）"></a>RS:数据（1）/命令选择端（0）</h2><h2 id="RW：读（1）-写选择端（0）"><a href="#RW：读（1）-写选择端（0）" class="headerlink" title="RW：读（1）/写选择端（0）"></a>RW：读（1）/写选择端（0）</h2><h2 id="E：使能信号"><a href="#E：使能信号" class="headerlink" title="E：使能信号"></a>E：使能信号</h2><h4 id="实际上只需要操作以上三个接口"><a href="#实际上只需要操作以上三个接口" class="headerlink" title="实际上只需要操作以上三个接口"></a>实际上只需要操作以上三个接口</h4><h4 id="一般液晶用来显示数据，不需要读数据，所以RW位一直置低电平"><a href="#一般液晶用来显示数据，不需要读数据，所以RW位一直置低电平" class="headerlink" title="一般液晶用来显示数据，不需要读数据，所以RW位一直置低电平"></a>一般液晶用来显示数据，不需要读数据，所以RW位一直置低电平</h4><h4 id="步骤为，选择命令端，送命令，使能信号由高到低，数据选择端，送数据，使能信号由高到低"><a href="#步骤为，选择命令端，送命令，使能信号由高到低，数据选择端，送数据，使能信号由高到低" class="headerlink" title="步骤为，选择命令端，送命令，使能信号由高到低，数据选择端，送数据，使能信号由高到低"></a>步骤为，选择命令端，送命令，使能信号由高到低，数据选择端，送数据，使能信号由高到低</h4><h4 id="注意51单片机中数据连接P0口"><a href="#注意51单片机中数据连接P0口" class="headerlink" title="注意51单片机中数据连接P0口"></a>注意51单片机中数据连接P0口</h4><h4 id="下面是中文手册"><a href="#下面是中文手册" class="headerlink" title="下面是中文手册"></a>下面是中文手册</h4><div class="pdfobject-container" data-target="/data/1602zh.pdf" data-height="400px"></div>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>hardware</tag>
      </tags>
  </entry>
  <entry>
    <title>使用录播加速</title>
    <url>/2020/04/30/%E4%BD%BF%E7%94%A8%E5%BD%95%E6%92%AD/</url>
    <content><![CDATA[<h4 id="我的电路原理老师喜欢多个班一起上，一方面可以减少重复的内容，相同的课不需要重复讲，相对于线下课减少讲授时间，另一方面就是，他讲授的时间段我恰好有课，只能看录播，这就可以加速了嘛，老师的讲课速度，我3倍速听到刚刚好，不犯困。但是腾讯课堂只有两倍速，如何提到3倍呢"><a href="#我的电路原理老师喜欢多个班一起上，一方面可以减少重复的内容，相同的课不需要重复讲，相对于线下课减少讲授时间，另一方面就是，他讲授的时间段我恰好有课，只能看录播，这就可以加速了嘛，老师的讲课速度，我3倍速听到刚刚好，不犯困。但是腾讯课堂只有两倍速，如何提到3倍呢" class="headerlink" title="我的电路原理老师喜欢多个班一起上，一方面可以减少重复的内容，相同的课不需要重复讲，相对于线下课减少讲授时间，另一方面就是，他讲授的时间段我恰好有课，只能看录播，这就可以加速了嘛，老师的讲课速度，我3倍速听到刚刚好，不犯困。但是腾讯课堂只有两倍速，如何提到3倍呢"></a>我的电路原理老师喜欢多个班一起上，一方面可以减少重复的内容，相同的课不需要重复讲，相对于线下课减少讲授时间，另一方面就是，他讲授的时间段我恰好有课，只能看录播，这就可以加速了嘛，老师的讲课速度，我3倍速听到刚刚好，不犯困。但是腾讯课堂只有两倍速，如何提到3倍呢</h4><ul>
<li>打开Google Chrome浏览器，按一下键盘的F12，其他浏览器右键选择“检查元素”</li>
<li>然后弹出来一个小框框，选择控制台”console”<img style="float:center" src="/images/rate.png" alt="Pulpit rock" width="100%" height="400"></li>
<li>输入命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.querySelector(&#39;video&#39;).playbackRate&#x3D;n;</span><br></pre></td></tr></table></figure></li>
<li>其中n为速度，n=3就以三倍速度播放。注意命令中所有的标点都是英文字符，不要使用中文，否则报错</li>
<li>然后视频会以n倍速度播放，刷新页面需要重新输入命令<h4 id="其实用这个来刷网课也是不错的选择。。。"><a href="#其实用这个来刷网课也是不错的选择。。。" class="headerlink" title="其实用这个来刷网课也是不错的选择。。。"></a>其实用这个来刷网课也是不错的选择。。。</h4></li>
</ul>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>software</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>用ssh连接云服务器</title>
    <url>/2020/05/01/%E7%94%A8ssh%E8%BF%9E%E6%8E%A5%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h4 id="这个东西搞了我好久，终于好了"><a href="#这个东西搞了我好久，终于好了" class="headerlink" title="这个东西搞了我好久，终于好了"></a>这个东西搞了我好久，终于好了</h4><ul>
<li>首先，生成新的ssh（假设名字为name），之前没有的话新创建即可</li>
<li>在user文件夹下的.ssh/config文件中配置(没有的话新建一个)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host cloud    (这个名字随便取，到时要用到)</span><br><span class="line">HostName 39.101.162.253    (服务器的IP)</span><br><span class="line">User root     (服务器的)</span><br><span class="line">port 22</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;name</span><br></pre></td></tr></table></figure></li>
<li>注意      </li>
</ul>
<p>Host的名字随便取，到时需要用到<br>HostName为云服务器的IP<br>User为云服务器的用户，默认root<br>port为端口号，一般22(需要服务器开启端口)<br>IdentityFile 为刚刚新生成的ssh文件     </p>
<ul>
<li>然后执行命令，在cmd、shell、git bash都可以，root为用户，@后是IP<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i ~&#x2F;.ssh&#x2F;name.pub root@39.101.162.253</span><br></pre></td></tr></table></figure></li>
<li>接着输入密码进行身份验证</li>
<li>成功后会如图所示,一般会成功，有错误自行检查<img style="float:center" src="/images/sshtovirtual.png" alt="Pulpit rock" width="100%" height="200">   </li>
<li>接着在远程系统中找到authorized_keys这个文件并添加到对应的.ssh文件夹中（我是默认就有的添加的）</li>
<li>最后在远程系统的根目录执行命令重启ssh服务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;ssh restart</span><br></pre></td></tr></table></figure></li>
<li>然后在本地执行命令(cloud是上面config文件的Host名字)，你会发现现在不需要输入密码了，当然失败还是会提示输入密码的..<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh cloud</span><br></pre></td></tr></table></figure></li>
<li>接着就可以直接操作远程系统了，其实也可以用vscode配置插件，更香。。</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>software</tag>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
